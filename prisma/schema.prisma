generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  username  String    @unique
  email     String    @unique
  password  String
  posts     Post[]
  theme     String    @default("zinc green")
  problems  Problem[]
  // solved          Json // [{ problemId, score, code }]
}

model Community {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String   @unique
  description String
  posts       Post[]
}

model Post {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  title       String
  content     String
  score       Int       @default(0)
  likedBy     String[]  @default([])
  dislikedBy  String[]  @default([])
}

model Problem {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  // solvedBy   User[]   @relation(fields: [solvedById], references: [id])
  // solvedById String[]
  title      String
  source     String
  sourceLink String
  statement  String
  input      String
  output     String
  samples    Json
  notes      String
  tests      Test[]
}

model Test {
  id        String  @id @default(uuid())
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int
  input     String
  output    String
  points    Int
}
